apiVersion: tekton.dev/v1alpha1
kind: ClusterTask
metadata:
  name: l2c-build
spec:
  params:
    - name: BUILDER_IMAGE
      description: The location of the s2i builder image.
    - name: PATH_CONTEXT
      description: The location of the path to run s2i from.
      default: .
    - name: REGISTRY_SECRET_NAME
      description: Docker registry secret (kubernetes.io/dockerconfigjson type)
      default: ''
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: 'false'
    - name: LOGLEVEL
      description: Log level when running the S2I binary
      default: '0'
    - name: PACKAGE_SERVER_URL
      description: URL (including protocol, ip, port, and path) of private package server (e.g., devpi, pypi, verdaccio, ...)
      default: ''
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  results:
    - name: image-url
      description: Tag-updated image url
    - name: registry-cred
      description: Tag-updated image url
  steps:
    - name: update-image-url
      image: tmaxcloudck/cicd-util:1.0.2
      script: |
        #!/bin/bash
        GIT_DIR="/workspace/source"
        ORIGINAL_URL="$(outputs.resources.image.url)"
        TARGET_FILE="$(results.image-url.path)"

        [ $(echo $ORIGINAL_URL | awk -F '/' '{printf $NF}' | awk -F ':' '{printf "%d", split($0,a)}') -eq 1 ] && TAG=":"$(git --git-dir=$GIT_DIR/.git rev-parse --short HEAD)
        echo "$ORIGINAL_URL$TAG" | tee $TARGET_FILE
    - name: parse-registry-cred
      image: tmaxcloudck/cicd-util:1.0.2
      script: |
        #!/bin/bash
        FILENAME="$(results.registry-cred.path)"
        if [ "$(params.REGISTRY_SECRET_NAME)" != "" ]; then
            IMAGE_URL=$(cat $(results.image-url.path))
            URL_ARR=(${IMAGE_URL//\// })
            REGISTRY=${URL_ARR[0]}
            NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)

            ENCODED_CFG=$(kubectl -n $NAMESPACE get secrets $(params.REGISTRY_SECRET_NAME) -o jsonpath='{.data.\.dockerconfigjson}')
            if [ $(( $? + 0 )) -eq 0 ]; then
                CRED=$(echo $ENCODED_CFG | base64 -d | jq -r '.auths."'$REGISTRY'".auth' --raw-output -c)
                if [ "$CRED" == "null" ]; then
                  CRED=""
                fi
                echo $CRED | tee $FILENAME
            else
                touch $FILENAME
            fi
        else
            touch $FILENAME
        fi
    - name: generate
      image: quay.io/openshift-pipeline/s2i:nightly
      script: |
        #!/bin/sh
        set -ex

        FILENAME=s2i.env
        touch $FILENAME

        if [ "$(inputs.params.PACKAGE_SERVER_URL)" != "" ]; then
          case "$(inputs.params.BUILDER_IMAGE)" in
            *python*) echo "PIP_INDEX_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME
                      echo "PIP_TRUSTED_HOST=*" >> $FILENAME ;;
            *django*) echo "PIP_INDEX_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME
                      echo "PIP_TRUSTED_HOST=*" >> $FILENAME ;;
            *nodejs*) echo "NPM_CONFIG_REGISTRY=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
            *tomcat*) echo "MVN_CENTRAL_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
            *wildfly*) echo "MVN_CENTRAL_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
            *jeus*) echo "MVN_CENTRAL_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
          esac
        fi

        /usr/local/bin/s2i \
        --loglevel=$(inputs.params.LOGLEVEL) \
        -E $FILENAME \
        build $(inputs.params.PATH_CONTEXT) $(inputs.params.BUILDER_IMAGE) \
        --as-dockerfile /gen-source/Dockerfile.gen
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
      workingdir: /workspace/source
    - name: build
      image: quay.io/buildah/stable
      script: |
        buildah \
        bud \
        --format \
        docker \
        --tls-verify=$(inputs.params.TLSVERIFY) \
        --storage-driver=vfs \
        --layers \
        -f \
        /gen-source/Dockerfile.gen \
        -t \
        $(cat $(results.image-url.path)) \
        .
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingdir: /gen-source
    - name: push
      image: quay.io/buildah/stable
      script: |
        #!/bin/bash

        IMAGE_URL=$(cat $(results.image-url.path))
        REG_CRED=$(cat $(results.registry-cred.path) | base64 -d)
        if [ "$REG_CRED" != "" ]; then
            CRED="--creds=$REG_CRED"
        fi

        buildah \
        push \
        --tls-verify=$(inputs.params.TLSVERIFY) \
        --storage-driver=vfs \
        $CRED \
        $IMAGE_URL \
        docker://$IMAGE_URL
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
