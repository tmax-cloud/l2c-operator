apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: l2c-build
spec:
  params:
    - description: Image to be saved
      name: IMAGE_URL
      type: string
    - description: The location of the s2i builder image.
      name: BUILDER_IMAGE
      type: string
    - default: .
      description: The location of the path to run s2i from.
      name: PATH_CONTEXT
      type: string
    - default: ""
      description: Docker registry secret (kubernetes.io/dockerconfigjson type)
      name: REGISTRY_SECRET_NAME
      type: string
    - default: "false"
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: "0"
      description: Log level when running the S2I binary
      name: LOGLEVEL
      type: string
    - default: ""
      description: URL (including protocol, ip, port, and path) of private package server
        (e.g., devpi, pypi, verdaccio, ...)
      name: PACKAGE_SERVER_URL
      type: string
  results:
    - description: Tag-updated image url
      name: image-url
    - description: Tag-updated image url
      name: registry-cred
  steps:
    - args:
        - update-image-url
      env:
        - name: SOURCE_PATH
          value: $(workspaces.git-source.path)
        - name: IMAGE_URL
          value: $(params.IMAGE_URL)
        - name: TARGET_FILE
          value: $(results.image-url.path)
      image: tmaxcloudck/cicd-util:latest
      name: update-image-url
      resources: {}
    - args:
        - parse-registry-cred
      env:
        - name: SECRET_NAME
          value: $(params.REGISTRY_SECRET_NAME)
        - name: IMAGE_URL_FILE
          value: $(results.image-url.path)
        - name: TARGET_FILE
          value: $(results.registry-cred.path)
      image: tmaxcloudck/cicd-util:latest
      name: parse-registry-cred
      resources: {}
    - image: quay.io/openshift-pipeline/s2i:nightly
      name: generate
      resources: {}
      script: |
        #!/bin/sh
        set -ex

        FILENAME=s2i.env
        touch $FILENAME

        if [ "$(inputs.params.PACKAGE_SERVER_URL)" != "" ]; then
          case "$(inputs.params.BUILDER_IMAGE)" in
            *python*) echo "PIP_INDEX_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME
                      echo "PIP_TRUSTED_HOST=*" >> $FILENAME ;;
            *django*) echo "PIP_INDEX_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME
                      echo "PIP_TRUSTED_HOST=*" >> $FILENAME ;;
            *nodejs*) echo "NPM_CONFIG_REGISTRY=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
            *tomcat*) echo "MVN_CENTRAL_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
            *wildfly*) echo "MVN_CENTRAL_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
            *jeus*) echo "MVN_CENTRAL_URL=$(inputs.params.PACKAGE_SERVER_URL)" >> $FILENAME;;
          esac
        fi

        /usr/local/bin/s2i \
        --loglevel=$(inputs.params.LOGLEVEL) \
        -E $FILENAME \
        build $(inputs.params.PATH_CONTEXT) $(inputs.params.BUILDER_IMAGE) \
        --as-dockerfile /gen-source/Dockerfile.gen
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
      workingDir: $(workspaces.git-source.path)
    - image: quay.io/buildah/stable
      name: build
      resources: {}
      script: |
        #!/bin/bash -x

        buildah \
        bud \
        --format \
        docker \
        --tls-verify=$(inputs.params.TLSVERIFY) \
        --storage-driver=vfs \
        -f \
        /gen-source/Dockerfile.gen \
        -t \
        $(cat $(results.image-url.path)) \
        .
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
    - image: quay.io/buildah/stable
      name: push
      resources: {}
      script: |
        #!/bin/bash -x

        IMAGE_URL=$(cat $(results.image-url.path))
        REG_CRED=$(cat $(results.registry-cred.path) | base64 -d)
        if [ "$REG_CRED" != "" ]; then
            CRED="--creds=$REG_CRED"
        fi

        buildah \
        push \
        --tls-verify=$(inputs.params.TLSVERIFY) \
        --storage-driver=vfs \
        $CRED \
        $IMAGE_URL \
        docker://$IMAGE_URL
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
  workspaces:
    - description: Git source directory
      name: git-source
